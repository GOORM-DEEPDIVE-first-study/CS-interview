### Q1. DB와 DBMS가 무엇인지 설명해 주세요

> A.
> DB: 데이터베이스(Database)란 여러 사람에 의해 공유되어 사용될 목적으로 통합하여 관리되는 데이터의 집합을 의미한다. 즉 데이터베이스는 데이터의 집합이라고 보면 됩니다.
>
> DBMS: DBMS는 컴퓨터 시스템에서 다수의 자료를 효율적으로 관리할 수 있도록 합니다. 기능으로 1.데이터 정의, 2.데이터 저장, 3.데이터 조작, 4. 데어터 공유, 5. 데이터 보호 (하드웨오나 소프트웨어 오작동 또는 권한 없는 사용자 접근으로 부터 데이터 보호)

#### Q1-1 DB 사용 목적은 무엇인가요?

    1.데이터의 중복 최소화
    2.데이터의 일관성
    3.데이터의 물리적, 논리적 독립성
    4.데이터의 무결성 문제 해결
    5.데이터의 보안 문제 해결
    6.데이터의 통합 관리 및 실시간 처리 가능
    7.저장된 자료의 공동 이용 가능

### Q2. 데이터베이스 view에 대해서 설명해주세요

> A. 하나 이상의 테이블에서 가져온 데이터를 가상의 테이블처럼 보여주는 객체로 실제 데이터를 저장하지 않고, SELECT 결과를 일시적으로 보여주는 역할이다. 장점으로는 원본 테이블의 데이터를 실시간으로 조회하며, 데이터 보안, 복잡한 쿼리 단순화, 재사용성 향상이 가능하다.

### Q3. 개념적 모델링, 논리적 모델링, 물리적 모델링 및 ER 모델에 대해서 설명해주세요.

> A. 개념적 모델링은 데이터를 추상화해서 ERD 형태로 표현하는 단계이고,
> 논리적 모델링은 이를 DB 구조에 맞게 테이블로 전환하는 단계입니다.
> 물리적 모델링은 실제 DBMS에 맞춰 설계하며 성능 최적화까지 고려하는 단계이다. .
> 그리고 ER 모델은 개념적 모델링에서 데이터를 표현할 때 사용하는 대표적인 모델입니다.

    < 개념적 모델링 >
     요구사항을 수집하고 분석한 결과를 가지고 업무의 핵심 개념을 구분하여 전체적인 뼈대를 만드는 과정을 말합니다.

    < 논리적 모델링 >
    개념적 모델링 단계에서 만들어진 ER 다이어그램을 사용하고자 하는 DBMS에 맞게 매핑하여 실제 데이터베이스로 구현하기 위한 모델을 만드는 과정을 말합니다.

    < 물리적 모델링 >
    작성된 논리적 모델을 실제 컴퓨터의 저장 장치에 저장하기 위한 물리적 구조를 정의하고 구현하는 과정을 말합니다.

    < ER 모델 >
    세상의 사물을 개체와 개체 간의 관계로 표현한 것을 말합니다.

### Q4. 트랜잭션이 무엇인가요?

> A. 트랜잭션은 데이터베이스에서 여러 작업을 하나의 논리적인 단위로 묶어서 처리하는 개념입니다.
> 트랜잭션은 원자성, 일관성, 고립성, 지속성(ACID)을 만족해야 하며,
> 예를 들어 은행 이체처럼 중간에 실패하면 전체가 취소되고,
> 성공하면 모든 결과가 영구적으로 반영되어야 됩니다.

#### Q4-1 활동, 장애, 철회, 부분완료, 완료은 트랙젼션의 무엇을 나태는 것들인가오?

> A. 상태

#### Q4-2 트랜잭션의 상태에 대해서 아는 것을 말씀해주세요

- 활동 (Active) : 트랜잭션이 실행 중인 상태
- 장애 (Fail) : 트랜잭션이 실행에 오류가 발생해 중단한 상태
- 철회 (Aborted) : 트랜잭션이 비정상적으로 종료되어 Rollback(트랜잭션 연산 이전의 상태로 돌아감) 수행하는 상태
- 부분 완료 (Partitially Commit) : 트랜잭션이 마지막 연산까지 실행했지만, Commit 연산이 실행되기 직전의 상태
- 완료 (Committed) : 트랜잭션이 성공적으로 종료되어 commit 연산을 실행한 후의 상태

### Q4-3 트랙잭션 중 commit과 RoleBack에 관해서 설명해주시고 각각 어느 상태일 때 동작하는지 알려주세요

- commit: Partitially Commit -> Comitted 상태 중간에 동작,
  트랜잭션의 모든 작업을 데이터베이스에 확정 저장하는 명령어이다.
  COMMIT을 하면 그 이전까지의 모든 변경 내용이 영구적으로 저장됩니다.

- ROLLBACK: Failed에서 요청 발생 후 동자하고 Aborted로 상태 변경,
  트랜잭션 도중 오류가 발생했을 때, 그 트랜잭션 내의 모든 변경을 취소하고 이전 상태로 되돌리는 명령어이다

---

### Q예제1-1

```sql
SELECT name FROM users WHERE city = 'Seoul' AND age > 30;

```

> A. 조건에 맞는 row 반환, city가 서울이고 age가 30보다 큰 모든 row의 name을 반환

### Q예제1-2

```sql
SELECT name FROM student ORDER BY score DESC LIMIT 2;
```

> A. 상위 2명 학생의 이름 출력,

### Q예제1-3

```sql
SELECT COUNT(*) FROM member WHERE phone_number IS NULL;
```

> A. member의 phone_number가 null인 row 개수
